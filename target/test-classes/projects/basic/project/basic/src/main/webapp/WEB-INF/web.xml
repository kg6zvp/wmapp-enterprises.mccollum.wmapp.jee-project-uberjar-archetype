<?xml version="1.0"?>
<!-- web.xml is used to configure information about the web server (not ReST API) portion of the project -->
<web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
	
	<display-name>basic</display-name>

	<!-- The welcome-file-list directive tells the container server which file names to look for in a directory. -->
	<!-- For example, with the following welcome-file-list, if a user navigates to mysite.com/ and the file index.xhtml is in the root of the webapp directory, their web browser will receive the same content as if they had navigated to mysite.com/index.xhtml -->
	<welcome-file-list>
		<welcome-file>index.xhtml</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- Declares a WebFilter, which 'filters' http requests for all urls specified by the filter-mapping directive (Note: Filters can be declared here or with an @WebFilter annotation on a filter class or a class that extends a filter class; google 'java servlet filters') -->
	<!-- This filter comes from the ssauthclient maven dependency -->
	<filter>
		<!-- This name will show up in the logs, but isn't important otherwise -->
		<display-name>JSF Login Filter</display-name>
		<!-- This name is used by the filter-mapping directive to match a filter with urls -->
		<filter-name>SSAuthClient</filter-name>
		<!-- This is the class that actually does the filtering -->
		<filter-class>enterprises.mccollum.wmapp.ssauthclient.LoginFilter</filter-class>
		
		<!-- Base URL of the login server, specified because the authorize-url and token-url parameters are specified as relative -->
		<init-param>
			<param-name>loginserver-base</param-name>
			<param-value>https://wmapp.mccollum.enterprises/loginserver</param-value>
		</init-param>
		
		<!-- URL for the OAuth authorization endpoint, used for web authentication, can be specified as a relative path in relation to the loginserver-base url or as an absolute path (ie: http://loginserver.com/oauth/authorize?scope=jared_sux_at_smash) -->
		<init-param>
			<param-name>authorize-url</param-name>
			<param-value>/api/oauth/authorize?scope=web&amp;response_type=code</param-value>
		</init-param>
		
		<!-- OAuth token URL, can be specified as a relative path in relation to the loginserver-base url or as an absolute path (ie: http://loginserver.com/oauth/authorize?scope=spidey_sux_at_cod) -->
		<init-param>
			<param-name>token-url</param-name>
			<param-value>/api/oauth/token</param-value>
		</init-param>
	</filter>

	<!-- This specified what URLs the filter with the given filter-name will be used for -->
	<!-- This configuration will use the filter named SSAuthClient from the Filter declaration for any url under /web/ -->
	<filter-mapping>
		<filter-name>SSAuthClient</filter-name>
		<!-- The / url is equivalent to the src/main/webapp folder and the /web/ url is equivalent to src/main/webapp/web/ -->
		<!-- The '*' at the end means to use this filter on ANY URL under /web/ -->
		<url-pattern>/web/*</url-pattern>
	</filter-mapping>

	<!-- This is included to set the primefaces ui theme to twitter bootstrap (very pretty, but can be removed) -->
	<context-param>
		<param-name>primefaces.THEME</param-name>
		<param-value>bootstrap</param-value>
	</context-param>
</web-app>
