#set( $sp = '#' )
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<version>${version}</version>
	<packaging>war</packaging>

	<properties>
		<!-- Tells maven that our source code is Java 8 -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<!-- Tells maven to compile our source code into something compatible with a Java 8 JVM -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<!-- Allows you to delete the webapp and all web-related stuff from the project entirely in case you're just
			building a ReST API or something else -->
		<failOnMissingWebXml>false</failOnMissingWebXml>
		
		<!-- Wildfly-Swarm version defined as a property because it is used more than once and this allows us to keep
			everything in sync -->
		<version.wildfly.swarm>2018.2.0</version.wildfly.swarm>
		<version.shrinkwrap.resolvers>3.1.3</version.shrinkwrap.resolvers>
	</properties>

	<!-- The DependencyManagement dependencies automatically set compatible versions on all of the dependencies below
		which don't have a version listed (important to ensure compatibility across Swarm components) -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.swarm</groupId>
				<artifactId>bom</artifactId>
				<version>${version.wildfly.swarm}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<!-- Tells your IDE and the compiler that this is a Java EE project and not to worry if some of the classes
				aren't bundled inside your source code because the implementations of those classes will be provided
				by the server -->
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>7.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- Url Utilities (It's often difficult to figure out what the real URL for a server is,
			so this library handles that) -->
		<dependency>
			<groupId>enterprises.mccollum.jee</groupId>
			<artifactId>urlutils</artifactId>
			<version>1.0.0</version>
		</dependency>
		<!-- GenericEntityEJB: Manages database access in a PURELY java way so you don't have to think about how
			SQL, etc. works (for similar, see Spring Data) -->
		<dependency>
			<groupId>enterprises.mccollum.utils</groupId>
			<artifactId>genericentityejb</artifactId>
			<version>1.0.5</version>
		</dependency>
		<dependency>
			<!-- Have hibernate generate the metamodel, does not require Hibernate to be JPA implementation used in
			 	final project-->
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>5.2.16.Final</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<!-- This is what provides authentication and authorization for your application -->
			<groupId>enterprises.mccollum.wmapp</groupId>
			<artifactId>ssauthclient</artifactId>
			<version>1.0.4</version>
		</dependency>
		<dependency>
			<!-- PrimeFaces provides extra Web UI goodies, delete if you're not adding a Web UI to your project -->
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>6.1</version>
		</dependency>
		<dependency>
			<!-- The PrettyFaces library, provides the ability to make query parameters into parts of the URL path in a
			Web UI (not applicable for a Web UI; google 'JSF PrettyFaces') -->
			<groupId>org.ocpsoft.rewrite</groupId>
			<artifactId>rewrite-servlet</artifactId>
			<version>3.4.1.Final</version>
		</dependency>
		<dependency>
			<!-- Part of PrettyFaces, don't delete -->
			<groupId>org.ocpsoft.rewrite</groupId>
			<artifactId>rewrite-config-prettyfaces</artifactId>
			<version>3.4.1.Final</version>
		</dependency>
		<dependency>
			<!-- Twitter Bootstrap theme for the web UI -->
			<groupId>org.primefaces.themes</groupId>
			<artifactId>bootstrap</artifactId>
			<version>1.0.10</version>
		</dependency>
		<dependency>
			<!-- OmniFaces library adds some extra tags to our XHTML (web UI thing) -->
			<groupId>org.omnifaces</groupId>
			<artifactId>omnifaces</artifactId>
			<version>2.6.2</version>
		</dependency>
		<dependency>
			<!-- Adds a simple embedded database right into the application -->
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.195</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- ${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp} -->
		<!-- ${sp} Testing Dependencies ${sp} -->
		<!-- ${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp}${sp} -->
		<dependency>
			<!-- Used for @Test, assertEquals(expected, actual), etc. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Allow Arquillian to be used for testing -->
			<!-- Arquillian allows our application to be tested while deployed on a real server, the built-in server
			 	Wildfly-Swarm in our case. -->
			<groupId>org.wildfly.swarm</groupId>
			<artifactId>arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Allows us to deploy the whole application for tests instead of painstakingly listing each class and
				file to be deployed during tests individually -->
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-maven-plugin</artifactId>
			<version>${version.shrinkwrap.resolvers}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${artifactId}</finalName>
		<!-- Plugins for the build process -->
		<plugins>
			<plugin>
				<!-- Let Wildfly Swarm do it's magic when we package our jar -->
				<groupId>org.wildfly.swarm</groupId>
				<artifactId>wildfly-swarm-plugin</artifactId>
				<version>${version.wildfly.swarm}</version>
				
				<executions>
					<execution>
						<goals>
							<goal>package</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jboss.shrinkwrap.resolver</groupId>
				<artifactId>shrinkwrap-resolver-maven-plugin</artifactId>
				<version>${version.shrinkwrap.resolvers}</version>
				<executions>
					<execution>
						<goals>
							<goal>propagate-execution-context</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<distributionManagement>
		<repository>
			<id>internal</id>
			<url>http://archiva.mccollum.enterprises/repository/internal/</url>
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<url>http://archiva.mccollum.enterprises/repository/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<repositories>
		<repository>
			<id>internal</id>
			<name>Archiva Managed Internal Repository</name>
			<url>http://archiva.mccollum.enterprises/repository/internal/</url>
			<releases>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>snapshots</id>
			<name>Archiva Managed Snapshot Repository</name>
			<url>http://archiva.mccollum.enterprises/repository/snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>internal</id>
			<name>Archiva Managed Internal Repository</name>
			<url>http://archiva.mccollum.enterprises/repository/internal/</url>
			<releases>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>snapshots</id>
			<name>Archiva Managed Snapshot Repository</name>
			<url>http://archiva.mccollum.enterprises/repository/snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
</project>
